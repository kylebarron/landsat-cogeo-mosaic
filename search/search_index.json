{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"landsat-cogeo-mosaic \u00b6 landsat-cogeo-mosaic is a Python library and CLI to create and work with MosaicJSON files. MosaicJSON is a specification that defines how to combine multiple (satellite) imagery assets across time and space into web mercator tiles. These files can then be used for on-the-fly satellite tile generation, using awspds-mosaic .","title":"Home"},{"location":"#landsat-cogeo-mosaic","text":"landsat-cogeo-mosaic is a Python library and CLI to create and work with MosaicJSON files. MosaicJSON is a specification that defines how to combine multiple (satellite) imagery assets across time and space into web mercator tiles. These files can then be used for on-the-fly satellite tile generation, using awspds-mosaic .","title":"landsat-cogeo-mosaic"},{"location":"cli/","text":"CLI \u00b6 create \u00b6 Usage: landsat-cogeo-mosaic create [OPTIONS] LINES Create MosaicJSON from STAC features Options: --min-zoom INTEGER Minimum zoom [default: 7] --max-zoom INTEGER Maximum zoom [default: 12] --quadkey-zoom INTEGER Zoom level used for quadkeys in MosaicJSON. Lower value means more assets per tile, but a smaller MosaicJSON file. Higher value means fewer assets per tile but a larger MosaicJSON file. Must be between min zoom and max zoom, inclusive. -b, --bounds TEXT Comma-separated bounding box: \"west, south, east, north\" --optimized-selection / --no-optimized-selection Attempt to optimize assets in tile. This optimization implies that 1) assets will be ordered in the MosaicJSON in order of cover of the entire tile and 2) the total number of assets is kept to a minimum. [default: True] --season [spring|summer|autumn|winter] Season, can provide multiple --help Show this message and exit. Example \u00b6 features.json is output from landsat-cogeo-mosaic search . landsat-cogeo-mosaic create \\ --bounds '-127.64,23.92,-64.82,52.72' \\ --min-zoom 7 \\ --max-zoom 12 \\ --quadkey-zoom 8 \\ --optimized-selection \\ --season summer \\ features.json > mosaic.json create-from-db \u00b6 Create MosaicJSON from SQLite database of Landsat features. This is the fastest and most efficient way of creating a large Landsat MosaicJSON, and I recommend it especially for global mosaics. But first you need to create a local SQLite database of Landsat metadata. Metadata Download \u00b6 Make sure you're in the top-level folder of the repository. Then download the metadata from S3. This is about a 500MB file (uncompressed) as of April 2020, but it grows over time as new scenes are added. aws s3 cp s3://landsat-pds/c1/L8/scene_list.gz data/ gunzip -c data/scene_list.gz > data/scene_list Import into SQLite \u00b6 I use SQLite to speed up processing with lots of data. The csv_import.sql script creates a new table, imports the csv file, creates a couple new columns, and creates indices. Note that the script must be run from the directory where the file scene_list from above is stored. cd data/ sqlite3 scene_list.db < ../scripts/csv_import.sql cd - The database takes up about 750MB, including indices. API \u00b6 Usage: landsat-cogeo-mosaic create-from-db [OPTIONS] Create MosaicJSON from SQLite database of Landsat features Options: --sqlite-path PATH Path to sqlite3 db generated from scene_list [required] --pathrow-index PATH Path to pathrow-quadkey index [required] --max-cloud FLOAT Maximum cloud percentage [default: 100] --min-date TEXT Minimum date, inclusive [default: 2013-01-01] --max-date TEXT Maximum date, inclusive [default: 2020-05-19] --min-zoom INTEGER Minimum zoom [default: 7] --max-zoom INTEGER Maximum zoom [default: 12] -p, --sort-preference [newest|oldest|closest-to-date|min-cloud] Method for choosing scenes in the same path- row [default: newest] --closest-to-date TEXT Date used for comparisons when preference is closest-to-date. Format must be YYYY-MM-DD --help Show this message and exit. Example \u00b6 landsat-cogeo-mosaic create-from-db \\ ` # Path to the sqlite database file` \\ --sqlite-path data/scene_list.db \\ ` # Path to the path-row to quadkey index file. This is stored in Git` \\ --pathrow-index data/pr_index.json.gz \\ ` # Min zoom of mosaic, 7 is a good default for Landsat` \\ --min-zoom 7 \\ ` # Max zoom of mosaic, 12 is a good default for Landsat` \\ --max-zoom 12 \\ ` # Maximum cloud cover. This means 5%` \\ --max-cloud 5 \\ ` # Preference for choosing the asset for a tile` \\ --sort-preference closest-to-date \\ ` # Date used for comparisons when preference is closest-to-date` \\ --closest-to-date '2018-04-01' \\ > mosaic.json index \u00b6 Usage: landsat-cogeo-mosaic index [OPTIONS] Create optimized index of path-row to quadkey_zoom Options: --wrs-path PATH Path to Shapefile (.shp) of WRS2 polygons. You can download then extract from here https://www.usgs.gov/media/files/landsat- wrs-2-descending-path-row-shapefile [required] --scene-path PATH Path to CSV of scene metadata downloaded from AWS S3. [required] -b, --bounds TEXT force bounding box: \"west, south, east, north\" [default: -180,-90,180,90] --quadkey-zoom INTEGER Zoom level used for quadkeys in MosaicJSON. Lower value means more assets per tile, but a smaller MosaicJSON file. Higher value means fewer assets per tile but a larger MosaicJSON file. Must be between min zoom and max zoom, inclusive. [default: 8] --help Show this message and exit. Example \u00b6 The index stored in the Git repository is created from the following. The output is a gzipped, newline-delimited JSON file that maps path-rows to quadkeys at zoom level 8. landsat-cogeo-mosaic index \\ --wrs-path data/WRS2_descending_0/WRS2_descending.shp \\ --scene-path data/scene_list.gz \\ --quadkey-zoom 8 \\ | gzip \\ > data/pr_index.json.gz missing-quadkeys \u00b6 Find missing quadkeys within bounds that are over land. The shp-path expects to point to the unzipped 10m land polygons vector dataset shapefile from Natural Earth. Usage: landsat-cogeo-mosaic missing-quadkeys [OPTIONS] FILE Find quadkeys over land missing from mosaic Options: --shp-path PATH path to Natural Earth shapefile of land boundaries [required] -b, --bounds TEXT force bounding box: \"west, south, east, north\" --simplify / --no-simplify Reduce size of the output tileset as much as possible by merging leaves into parents. [default: True] --help Show this message and exit. search \u00b6 Download metadata from a STAC API. This outputs newline-delimited GeoJSON features. By default this searches the metadata of the Landsat 8 collection using an API instance hosted by Development Seed. Usage: landsat-cogeo-mosaic search [OPTIONS] Retrieve features from sat-api Options: -b, --bounds TEXT Comma-separated bounding box: \"west, south, east, north\" [required] --min-cloud FLOAT Minimum cloud percentage [default: 0] --max-cloud FLOAT Maximum cloud percentage [default: 100] --min-date TEXT Minimum date [default: 2013-01-01] --max-date TEXT Maximum date, inclusive [default: 2020-05-19] --period [day|week|month|year] Time period. If provided, overwrites `max- date` with the given period after `min- date`. --period-qty INTEGER Number of periods to apply after `min-date`. Only applies if `period` is provided. [default: 1] --season [spring|summer|autumn|winter] Season, can provide multiple --stac-collection-limit INTEGER Limits the number of items per page returned by sat-api. [default: 500] --help Show this message and exit. Example \u00b6 landsat-cogeo-mosaic search \\ --bounds '-127.64,23.92,-64.82,52.72' \\ ` # Maximum 10% cloud cover` \\ --max-cloud 10 \\ ` # Imagery from 2019` \\ --min-date 2019 -01-01 \\ --max-date 2020 -01-01 \\ --season summer > features.json Note that if the query would return more than 10,000 scenes, an error is produced, as 10,000 is the max the API can return . However, since the output is newline-delimited GeoJSON, you can append features easily: landsat-cogeo-mosaic search ... >> features.json visualize \u00b6 Visualize Landsat mosaic in kepler.gl. Usage: landsat-cogeo-mosaic visualize [OPTIONS] [MOSAIC_PATHS]... Visualize Landsat mosaic in kepler.gl Options: -p, --wrs-path PATH Path to Shapefile (.shp) of WRS2 polygons. You can download then extract from here https://www.usgs.gov/media/files/landsat- wrs-2-descending-path-row-shapefile [required] --api-key TEXT Mapbox API key. Can also be read from the MAPBOX_API_KEY environment variable. --help Show this message and exit.","title":"CLI"},{"location":"cli/#cli","text":"","title":"CLI"},{"location":"cli/#create","text":"Usage: landsat-cogeo-mosaic create [OPTIONS] LINES Create MosaicJSON from STAC features Options: --min-zoom INTEGER Minimum zoom [default: 7] --max-zoom INTEGER Maximum zoom [default: 12] --quadkey-zoom INTEGER Zoom level used for quadkeys in MosaicJSON. Lower value means more assets per tile, but a smaller MosaicJSON file. Higher value means fewer assets per tile but a larger MosaicJSON file. Must be between min zoom and max zoom, inclusive. -b, --bounds TEXT Comma-separated bounding box: \"west, south, east, north\" --optimized-selection / --no-optimized-selection Attempt to optimize assets in tile. This optimization implies that 1) assets will be ordered in the MosaicJSON in order of cover of the entire tile and 2) the total number of assets is kept to a minimum. [default: True] --season [spring|summer|autumn|winter] Season, can provide multiple --help Show this message and exit.","title":"create"},{"location":"cli/#example","text":"features.json is output from landsat-cogeo-mosaic search . landsat-cogeo-mosaic create \\ --bounds '-127.64,23.92,-64.82,52.72' \\ --min-zoom 7 \\ --max-zoom 12 \\ --quadkey-zoom 8 \\ --optimized-selection \\ --season summer \\ features.json > mosaic.json","title":"Example"},{"location":"cli/#create-from-db","text":"Create MosaicJSON from SQLite database of Landsat features. This is the fastest and most efficient way of creating a large Landsat MosaicJSON, and I recommend it especially for global mosaics. But first you need to create a local SQLite database of Landsat metadata.","title":"create-from-db"},{"location":"cli/#metadata-download","text":"Make sure you're in the top-level folder of the repository. Then download the metadata from S3. This is about a 500MB file (uncompressed) as of April 2020, but it grows over time as new scenes are added. aws s3 cp s3://landsat-pds/c1/L8/scene_list.gz data/ gunzip -c data/scene_list.gz > data/scene_list","title":"Metadata Download"},{"location":"cli/#import-into-sqlite","text":"I use SQLite to speed up processing with lots of data. The csv_import.sql script creates a new table, imports the csv file, creates a couple new columns, and creates indices. Note that the script must be run from the directory where the file scene_list from above is stored. cd data/ sqlite3 scene_list.db < ../scripts/csv_import.sql cd - The database takes up about 750MB, including indices.","title":"Import into SQLite"},{"location":"cli/#api","text":"Usage: landsat-cogeo-mosaic create-from-db [OPTIONS] Create MosaicJSON from SQLite database of Landsat features Options: --sqlite-path PATH Path to sqlite3 db generated from scene_list [required] --pathrow-index PATH Path to pathrow-quadkey index [required] --max-cloud FLOAT Maximum cloud percentage [default: 100] --min-date TEXT Minimum date, inclusive [default: 2013-01-01] --max-date TEXT Maximum date, inclusive [default: 2020-05-19] --min-zoom INTEGER Minimum zoom [default: 7] --max-zoom INTEGER Maximum zoom [default: 12] -p, --sort-preference [newest|oldest|closest-to-date|min-cloud] Method for choosing scenes in the same path- row [default: newest] --closest-to-date TEXT Date used for comparisons when preference is closest-to-date. Format must be YYYY-MM-DD --help Show this message and exit.","title":"API"},{"location":"cli/#example_1","text":"landsat-cogeo-mosaic create-from-db \\ ` # Path to the sqlite database file` \\ --sqlite-path data/scene_list.db \\ ` # Path to the path-row to quadkey index file. This is stored in Git` \\ --pathrow-index data/pr_index.json.gz \\ ` # Min zoom of mosaic, 7 is a good default for Landsat` \\ --min-zoom 7 \\ ` # Max zoom of mosaic, 12 is a good default for Landsat` \\ --max-zoom 12 \\ ` # Maximum cloud cover. This means 5%` \\ --max-cloud 5 \\ ` # Preference for choosing the asset for a tile` \\ --sort-preference closest-to-date \\ ` # Date used for comparisons when preference is closest-to-date` \\ --closest-to-date '2018-04-01' \\ > mosaic.json","title":"Example"},{"location":"cli/#index","text":"Usage: landsat-cogeo-mosaic index [OPTIONS] Create optimized index of path-row to quadkey_zoom Options: --wrs-path PATH Path to Shapefile (.shp) of WRS2 polygons. You can download then extract from here https://www.usgs.gov/media/files/landsat- wrs-2-descending-path-row-shapefile [required] --scene-path PATH Path to CSV of scene metadata downloaded from AWS S3. [required] -b, --bounds TEXT force bounding box: \"west, south, east, north\" [default: -180,-90,180,90] --quadkey-zoom INTEGER Zoom level used for quadkeys in MosaicJSON. Lower value means more assets per tile, but a smaller MosaicJSON file. Higher value means fewer assets per tile but a larger MosaicJSON file. Must be between min zoom and max zoom, inclusive. [default: 8] --help Show this message and exit.","title":"index"},{"location":"cli/#example_2","text":"The index stored in the Git repository is created from the following. The output is a gzipped, newline-delimited JSON file that maps path-rows to quadkeys at zoom level 8. landsat-cogeo-mosaic index \\ --wrs-path data/WRS2_descending_0/WRS2_descending.shp \\ --scene-path data/scene_list.gz \\ --quadkey-zoom 8 \\ | gzip \\ > data/pr_index.json.gz","title":"Example"},{"location":"cli/#missing-quadkeys","text":"Find missing quadkeys within bounds that are over land. The shp-path expects to point to the unzipped 10m land polygons vector dataset shapefile from Natural Earth. Usage: landsat-cogeo-mosaic missing-quadkeys [OPTIONS] FILE Find quadkeys over land missing from mosaic Options: --shp-path PATH path to Natural Earth shapefile of land boundaries [required] -b, --bounds TEXT force bounding box: \"west, south, east, north\" --simplify / --no-simplify Reduce size of the output tileset as much as possible by merging leaves into parents. [default: True] --help Show this message and exit.","title":"missing-quadkeys"},{"location":"cli/#search","text":"Download metadata from a STAC API. This outputs newline-delimited GeoJSON features. By default this searches the metadata of the Landsat 8 collection using an API instance hosted by Development Seed. Usage: landsat-cogeo-mosaic search [OPTIONS] Retrieve features from sat-api Options: -b, --bounds TEXT Comma-separated bounding box: \"west, south, east, north\" [required] --min-cloud FLOAT Minimum cloud percentage [default: 0] --max-cloud FLOAT Maximum cloud percentage [default: 100] --min-date TEXT Minimum date [default: 2013-01-01] --max-date TEXT Maximum date, inclusive [default: 2020-05-19] --period [day|week|month|year] Time period. If provided, overwrites `max- date` with the given period after `min- date`. --period-qty INTEGER Number of periods to apply after `min-date`. Only applies if `period` is provided. [default: 1] --season [spring|summer|autumn|winter] Season, can provide multiple --stac-collection-limit INTEGER Limits the number of items per page returned by sat-api. [default: 500] --help Show this message and exit.","title":"search"},{"location":"cli/#example_3","text":"landsat-cogeo-mosaic search \\ --bounds '-127.64,23.92,-64.82,52.72' \\ ` # Maximum 10% cloud cover` \\ --max-cloud 10 \\ ` # Imagery from 2019` \\ --min-date 2019 -01-01 \\ --max-date 2020 -01-01 \\ --season summer > features.json Note that if the query would return more than 10,000 scenes, an error is produced, as 10,000 is the max the API can return . However, since the output is newline-delimited GeoJSON, you can append features easily: landsat-cogeo-mosaic search ... >> features.json","title":"Example"},{"location":"cli/#visualize","text":"Visualize Landsat mosaic in kepler.gl. Usage: landsat-cogeo-mosaic visualize [OPTIONS] [MOSAIC_PATHS]... Visualize Landsat mosaic in kepler.gl Options: -p, --wrs-path PATH Path to Shapefile (.shp) of WRS2 polygons. You can download then extract from here https://www.usgs.gov/media/files/landsat- wrs-2-descending-path-row-shapefile [required] --api-key TEXT Mapbox API key. Can also be read from the MAPBOX_API_KEY environment variable. --help Show this message and exit.","title":"visualize"},{"location":"install/","text":"Install \u00b6 git clone https://github.com/kylebarron/landsat-cogeo-mosaic cd landsat-cogeo-mosaic pip install . For some included commands, you may need SQLite installed.","title":"Install"},{"location":"install/#install","text":"git clone https://github.com/kylebarron/landsat-cogeo-mosaic cd landsat-cogeo-mosaic pip install . For some included commands, you may need SQLite installed.","title":"Install"},{"location":"examples/global/","text":"Worldwide basemaps \u00b6 I'm interested in creating a global, cloudless basemap for each season. Low-cloud per season \u00b6 Spring \u00b6 mkdir -p data/out/ for year in { 2014 ..2019 } ; do min_date = \" ${ year } -03-21\" max_date = \" ${ year } -06-21\" landsat-cogeo-mosaic create-from-db \\ --sqlite-path data/scene_list.db \\ --pathrow-index data/pr_index.json.gz \\ --min-zoom 7 \\ --max-zoom 12 \\ --min-date \" $min_date \" \\ --max-date \" $max_date \" \\ --max-cloud 100 \\ --sort-preference min-cloud \\ > \"data/out/mosaic_ ${ year } _spring.json\" done Summer \u00b6 mkdir -p data/out/ for year in { 2013 ..2019 } ; do min_date = \" ${ year } -06-21\" max_date = \" ${ year } -09-21\" landsat-cogeo-mosaic create-from-db \\ --sqlite-path data/scene_list.db \\ --pathrow-index data/pr_index.json.gz \\ --min-zoom 7 \\ --max-zoom 12 \\ --min-date \" $min_date \" \\ --max-date \" $max_date \" \\ --max-cloud 100 \\ --sort-preference min-cloud \\ > \"data/out/mosaic_ ${ year } _summer.json\" done Fall \u00b6 mkdir -p data/out/ for year in { 2013 ..2019 } ; do min_date = \" ${ year } -09-21\" max_date = \" ${ year } -12-21\" landsat-cogeo-mosaic create-from-db \\ --sqlite-path data/scene_list.db \\ --pathrow-index data/pr_index.json.gz \\ --min-zoom 7 \\ --max-zoom 12 \\ --min-date \" $min_date \" \\ --max-date \" $max_date \" \\ --max-cloud 100 \\ --sort-preference min-cloud \\ > \"data/out/mosaic_ ${ year } _fall.json\" done Winter \u00b6 mkdir -p data/out/ for year in { 2014 ..2020 } ; do min_date = \" $(( year - 1 )) -12-21\" max_date = \" ${ year } -03-21\" # echo $min_date # echo $max_date landsat-cogeo-mosaic create-from-db \\ --sqlite-path data/scene_list.db \\ --pathrow-index data/pr_index.json.gz \\ --min-zoom 7 \\ --max-zoom 12 \\ --min-date \" $min_date \" \\ --max-date \" $max_date \" \\ --max-cloud 100 \\ --sort-preference min-cloud \\ > \"data/out/mosaic_ ${ year } _winter.json\" done Latest cloudless \u00b6 I'll also create a \"latest cloudless\" mosaic, which I'll use as the base for my auto-updating landsat script , which updates a DynamoDB table as SNS notifications of new Landsat assets come in. landsat-cogeo-mosaic create-from-db \\ ` # Path to the sqlite database file` \\ --sqlite-path data/scene_list.db \\ ` # Path to the path-row geometry file. This is stored in Git` \\ --pathrow-index data/pr_index.json.gz \\ ` # Min zoom of mosaic, 7 is a good default for Landsat` \\ --min-zoom 7 \\ ` # Max zoom of mosaic, 12 is a good default for Landsat` \\ --max-zoom 12 \\ ` # Maximum cloud cover. This means 5%` \\ --max-cloud 5 \\ ` # Preference for choosing the asset for a tile` \\ --sort-preference newest \\ > data/out/mosaic_latest.json Then upload this mosaic to the DynamoDB table I use for the auto-updating landsat mosaic. The cogeo-mosaic CLI contains a helper for uploading a MosaicJSON to a DynamoDB table. cogeo-mosaic upload --url 'dynamodb://region/table-name' mosaic.json","title":"Global Basemap"},{"location":"examples/global/#worldwide-basemaps","text":"I'm interested in creating a global, cloudless basemap for each season.","title":"Worldwide basemaps"},{"location":"examples/global/#low-cloud-per-season","text":"","title":"Low-cloud per season"},{"location":"examples/global/#spring","text":"mkdir -p data/out/ for year in { 2014 ..2019 } ; do min_date = \" ${ year } -03-21\" max_date = \" ${ year } -06-21\" landsat-cogeo-mosaic create-from-db \\ --sqlite-path data/scene_list.db \\ --pathrow-index data/pr_index.json.gz \\ --min-zoom 7 \\ --max-zoom 12 \\ --min-date \" $min_date \" \\ --max-date \" $max_date \" \\ --max-cloud 100 \\ --sort-preference min-cloud \\ > \"data/out/mosaic_ ${ year } _spring.json\" done","title":"Spring"},{"location":"examples/global/#summer","text":"mkdir -p data/out/ for year in { 2013 ..2019 } ; do min_date = \" ${ year } -06-21\" max_date = \" ${ year } -09-21\" landsat-cogeo-mosaic create-from-db \\ --sqlite-path data/scene_list.db \\ --pathrow-index data/pr_index.json.gz \\ --min-zoom 7 \\ --max-zoom 12 \\ --min-date \" $min_date \" \\ --max-date \" $max_date \" \\ --max-cloud 100 \\ --sort-preference min-cloud \\ > \"data/out/mosaic_ ${ year } _summer.json\" done","title":"Summer"},{"location":"examples/global/#fall","text":"mkdir -p data/out/ for year in { 2013 ..2019 } ; do min_date = \" ${ year } -09-21\" max_date = \" ${ year } -12-21\" landsat-cogeo-mosaic create-from-db \\ --sqlite-path data/scene_list.db \\ --pathrow-index data/pr_index.json.gz \\ --min-zoom 7 \\ --max-zoom 12 \\ --min-date \" $min_date \" \\ --max-date \" $max_date \" \\ --max-cloud 100 \\ --sort-preference min-cloud \\ > \"data/out/mosaic_ ${ year } _fall.json\" done","title":"Fall"},{"location":"examples/global/#winter","text":"mkdir -p data/out/ for year in { 2014 ..2020 } ; do min_date = \" $(( year - 1 )) -12-21\" max_date = \" ${ year } -03-21\" # echo $min_date # echo $max_date landsat-cogeo-mosaic create-from-db \\ --sqlite-path data/scene_list.db \\ --pathrow-index data/pr_index.json.gz \\ --min-zoom 7 \\ --max-zoom 12 \\ --min-date \" $min_date \" \\ --max-date \" $max_date \" \\ --max-cloud 100 \\ --sort-preference min-cloud \\ > \"data/out/mosaic_ ${ year } _winter.json\" done","title":"Winter"},{"location":"examples/global/#latest-cloudless","text":"I'll also create a \"latest cloudless\" mosaic, which I'll use as the base for my auto-updating landsat script , which updates a DynamoDB table as SNS notifications of new Landsat assets come in. landsat-cogeo-mosaic create-from-db \\ ` # Path to the sqlite database file` \\ --sqlite-path data/scene_list.db \\ ` # Path to the path-row geometry file. This is stored in Git` \\ --pathrow-index data/pr_index.json.gz \\ ` # Min zoom of mosaic, 7 is a good default for Landsat` \\ --min-zoom 7 \\ ` # Max zoom of mosaic, 12 is a good default for Landsat` \\ --max-zoom 12 \\ ` # Maximum cloud cover. This means 5%` \\ --max-cloud 5 \\ ` # Preference for choosing the asset for a tile` \\ --sort-preference newest \\ > data/out/mosaic_latest.json Then upload this mosaic to the DynamoDB table I use for the auto-updating landsat mosaic. The cogeo-mosaic CLI contains a helper for uploading a MosaicJSON to a DynamoDB table. cogeo-mosaic upload --url 'dynamodb://region/table-name' mosaic.json","title":"Latest cloudless"},{"location":"examples/stac/","text":"Sat API Example \u00b6 Imagery by season (small-ish region) \u00b6 This example uses the non-bulk approach described above. I'm interested in creating a seamless cloudless mosaicJSON of imagery for the continental U.S. Some areas very often have clouds, so I first download metadata for all low-cloud Landsat imagery from 2013-2020, and then merge them. rm features.geojson for year in { 2013 ..2019 } ; do next_year = $(( year + 1 )) landsat-cogeo-mosaic search \\ --bounds '-127.64,23.92,-64.82,52.72' \\ --max-cloud 5 \\ --min-date \" ${ year } -01-01\" \\ --max-date \" ${ next_year } -01-01\" >> features.geojson done Now features.geojson is a newline-delimited GeoJSON where the geometries are polygons indicating the extent of the scene. Landsat 8 took 22,000 images of the continental U.S. between 2013 and 2020 where less than 5% of the image was clouds! > wc -l features.geojson 22081 features.geojson Note that currently features.geojson cover year-round scenes. Let's see how many are in December, January, and February, using jq and my Kepler.gl cli . cat features.geojson | jq -c 'if .properties.datetime | .[0:19] + \"Z\" | fromdate | strftime(\"%m\") | tonumber | select(. <= 2 or . >= 12) then . else empty end' > temp.geojson kepler temp.geojson Well, the Northwest and Northeast are both cloudy pretty often in the winter. In some places, there wasn't a single pass of Landsat from 2013-2020 for much of those areas that caught imagery without clouds! In contrast, for much of the Southwest, there were many cloudless days. How about summer months between June and August? cat features.geojson | jq -c 'if .properties.datetime | .[0:19] + \"Z\" | fromdate | strftime(\"%m\") | tonumber | select(. >= 6 and . <= 8) then . else empty end' > temp.geojson kepler temp.geojson Now the Southeast is cloudy! You really can't win can you? For now, just create a non-winter one: landsat-cogeo-mosaic create \\ --bounds '-127.64,23.92,-64.82,52.72' \\ --min-zoom 7 \\ --max-zoom 12 \\ --quadkey-zoom 8 \\ --optimized-selection \\ --season summer \\ --season spring \\ --season autumn \\ features.geojson > mosaic.json","title":"STAC Features"},{"location":"examples/stac/#sat-api-example","text":"","title":"Sat API Example"},{"location":"examples/stac/#imagery-by-season-small-ish-region","text":"This example uses the non-bulk approach described above. I'm interested in creating a seamless cloudless mosaicJSON of imagery for the continental U.S. Some areas very often have clouds, so I first download metadata for all low-cloud Landsat imagery from 2013-2020, and then merge them. rm features.geojson for year in { 2013 ..2019 } ; do next_year = $(( year + 1 )) landsat-cogeo-mosaic search \\ --bounds '-127.64,23.92,-64.82,52.72' \\ --max-cloud 5 \\ --min-date \" ${ year } -01-01\" \\ --max-date \" ${ next_year } -01-01\" >> features.geojson done Now features.geojson is a newline-delimited GeoJSON where the geometries are polygons indicating the extent of the scene. Landsat 8 took 22,000 images of the continental U.S. between 2013 and 2020 where less than 5% of the image was clouds! > wc -l features.geojson 22081 features.geojson Note that currently features.geojson cover year-round scenes. Let's see how many are in December, January, and February, using jq and my Kepler.gl cli . cat features.geojson | jq -c 'if .properties.datetime | .[0:19] + \"Z\" | fromdate | strftime(\"%m\") | tonumber | select(. <= 2 or . >= 12) then . else empty end' > temp.geojson kepler temp.geojson Well, the Northwest and Northeast are both cloudy pretty often in the winter. In some places, there wasn't a single pass of Landsat from 2013-2020 for much of those areas that caught imagery without clouds! In contrast, for much of the Southwest, there were many cloudless days. How about summer months between June and August? cat features.geojson | jq -c 'if .properties.datetime | .[0:19] + \"Z\" | fromdate | strftime(\"%m\") | tonumber | select(. >= 6 and . <= 8) then . else empty end' > temp.geojson kepler temp.geojson Now the Southeast is cloudy! You really can't win can you? For now, just create a non-winter one: landsat-cogeo-mosaic create \\ --bounds '-127.64,23.92,-64.82,52.72' \\ --min-zoom 7 \\ --max-zoom 12 \\ --quadkey-zoom 8 \\ --optimized-selection \\ --season summer \\ --season spring \\ --season autumn \\ features.geojson > mosaic.json","title":"Imagery by season (small-ish region)"}]}