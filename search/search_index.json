{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"landsat-cogeo-mosaic \u00b6 landsat-cogeo-mosaic is a Python library and CLI to create and work with MosaicJSON files. MosaicJSON is a specification that defines how to combine multiple (satellite) imagery assets across time and space into web mercator tiles. These files can then be used for on-the-fly satellite tile generation, using awspds-mosaic .","title":"Home"},{"location":"#landsat-cogeo-mosaic","text":"landsat-cogeo-mosaic is a Python library and CLI to create and work with MosaicJSON files. MosaicJSON is a specification that defines how to combine multiple (satellite) imagery assets across time and space into web mercator tiles. These files can then be used for on-the-fly satellite tile generation, using awspds-mosaic .","title":"landsat-cogeo-mosaic"},{"location":"install/","text":"Install \u00b6 git clone https://github.com/kylebarron/landsat-cogeo-mosaic cd landsat-cogeo-mosaic pip install . For some included commands, you may need SQLite installed.","title":"Install"},{"location":"install/#install","text":"git clone https://github.com/kylebarron/landsat-cogeo-mosaic cd landsat-cogeo-mosaic pip install . For some included commands, you may need SQLite installed.","title":"Install"},{"location":"examples/global/","text":"Worldwide basemaps \u00b6 I'm interested in creating a global, cloudless basemap for each season. Low-cloud per season \u00b6 Spring \u00b6 mkdir -p data/out/ for year in { 2014 ..2019 } ; do min_date = \" ${ year } -03-21\" max_date = \" ${ year } -06-21\" landsat-cogeo-mosaic create-from-db \\ --sqlite-path data/scene_list.db \\ --pathrow-index data/pr_index.jsonl.gz \\ --min-zoom 7 \\ --max-zoom 12 \\ --min-date \" $min_date \" \\ --max-date \" $max_date \" \\ --max-cloud 100 \\ --sort-preference min-cloud \\ > \"data/out/mosaic_ ${ year } _spring.json\" done Summer \u00b6 mkdir -p data/out/ for year in { 2013 ..2019 } ; do min_date = \" ${ year } -06-21\" max_date = \" ${ year } -09-21\" landsat-cogeo-mosaic create-from-db \\ --sqlite-path data/scene_list.db \\ --pathrow-index data/pr_index.jsonl.gz \\ --min-zoom 7 \\ --max-zoom 12 \\ --min-date \" $min_date \" \\ --max-date \" $max_date \" \\ --max-cloud 100 \\ --sort-preference min-cloud \\ > \"data/out/mosaic_ ${ year } _summer.json\" done Fall \u00b6 mkdir -p data/out/ for year in { 2013 ..2019 } ; do min_date = \" ${ year } -09-21\" max_date = \" ${ year } -12-21\" landsat-cogeo-mosaic create-from-db \\ --sqlite-path data/scene_list.db \\ --pathrow-index data/pr_index.jsonl.gz \\ --min-zoom 7 \\ --max-zoom 12 \\ --min-date \" $min_date \" \\ --max-date \" $max_date \" \\ --max-cloud 100 \\ --sort-preference min-cloud \\ > \"data/out/mosaic_ ${ year } _fall.json\" done Winter \u00b6 mkdir -p data/out/ for year in { 2014 ..2020 } ; do min_date = \" $(( year - 1 )) -12-21\" max_date = \" ${ year } -03-21\" # echo $min_date # echo $max_date landsat-cogeo-mosaic create-from-db \\ --sqlite-path data/scene_list.db \\ --pathrow-index data/pr_index.jsonl.gz \\ --min-zoom 7 \\ --max-zoom 12 \\ --min-date \" $min_date \" \\ --max-date \" $max_date \" \\ --max-cloud 100 \\ --sort-preference min-cloud \\ > \"data/out/mosaic_ ${ year } _winter.json\" done Latest cloudless \u00b6 I'll also create a \"latest cloudless\" mosaic, which I'll use as the base for my auto-updating landsat script , which updates a DynamoDB table as SNS notifications of new Landsat assets come in. landsat-cogeo-mosaic create-from-db \\ ` # Path to the sqlite database file` \\ --sqlite-path data/scene_list.db \\ ` # Path to the path-row geometry file. This is stored in Git` \\ --pathrow-index data/pr_index.jsonl.gz \\ ` # Min zoom of mosaic, 7 is a good default for Landsat` \\ --min-zoom 7 \\ ` # Max zoom of mosaic, 12 is a good default for Landsat` \\ --max-zoom 12 \\ ` # Zoom level to use for quadkeys` \\ --quadkey-zoom 8 \\ ` # Maximum cloud cover. This means 5%` \\ --max-cloud 5 \\ ` # Preference for choosing the asset for a tile` \\ --sort-preference newest \\ > data/out/mosaic_latest.json Then upload this mosaic to the DynamoDB table I use for the auto-updating landsat mosaic. The cogeo-mosaic CLI contains a helper for uploading a MosaicJSON to a DynamoDB table. cogeo-mosaic upload --url 'dynamodb://region/table-name' mosaic.json","title":"Global Basemap"},{"location":"examples/global/#worldwide-basemaps","text":"I'm interested in creating a global, cloudless basemap for each season.","title":"Worldwide basemaps"},{"location":"examples/global/#low-cloud-per-season","text":"","title":"Low-cloud per season"},{"location":"examples/global/#spring","text":"mkdir -p data/out/ for year in { 2014 ..2019 } ; do min_date = \" ${ year } -03-21\" max_date = \" ${ year } -06-21\" landsat-cogeo-mosaic create-from-db \\ --sqlite-path data/scene_list.db \\ --pathrow-index data/pr_index.jsonl.gz \\ --min-zoom 7 \\ --max-zoom 12 \\ --min-date \" $min_date \" \\ --max-date \" $max_date \" \\ --max-cloud 100 \\ --sort-preference min-cloud \\ > \"data/out/mosaic_ ${ year } _spring.json\" done","title":"Spring"},{"location":"examples/global/#summer","text":"mkdir -p data/out/ for year in { 2013 ..2019 } ; do min_date = \" ${ year } -06-21\" max_date = \" ${ year } -09-21\" landsat-cogeo-mosaic create-from-db \\ --sqlite-path data/scene_list.db \\ --pathrow-index data/pr_index.jsonl.gz \\ --min-zoom 7 \\ --max-zoom 12 \\ --min-date \" $min_date \" \\ --max-date \" $max_date \" \\ --max-cloud 100 \\ --sort-preference min-cloud \\ > \"data/out/mosaic_ ${ year } _summer.json\" done","title":"Summer"},{"location":"examples/global/#fall","text":"mkdir -p data/out/ for year in { 2013 ..2019 } ; do min_date = \" ${ year } -09-21\" max_date = \" ${ year } -12-21\" landsat-cogeo-mosaic create-from-db \\ --sqlite-path data/scene_list.db \\ --pathrow-index data/pr_index.jsonl.gz \\ --min-zoom 7 \\ --max-zoom 12 \\ --min-date \" $min_date \" \\ --max-date \" $max_date \" \\ --max-cloud 100 \\ --sort-preference min-cloud \\ > \"data/out/mosaic_ ${ year } _fall.json\" done","title":"Fall"},{"location":"examples/global/#winter","text":"mkdir -p data/out/ for year in { 2014 ..2020 } ; do min_date = \" $(( year - 1 )) -12-21\" max_date = \" ${ year } -03-21\" # echo $min_date # echo $max_date landsat-cogeo-mosaic create-from-db \\ --sqlite-path data/scene_list.db \\ --pathrow-index data/pr_index.jsonl.gz \\ --min-zoom 7 \\ --max-zoom 12 \\ --min-date \" $min_date \" \\ --max-date \" $max_date \" \\ --max-cloud 100 \\ --sort-preference min-cloud \\ > \"data/out/mosaic_ ${ year } _winter.json\" done","title":"Winter"},{"location":"examples/global/#latest-cloudless","text":"I'll also create a \"latest cloudless\" mosaic, which I'll use as the base for my auto-updating landsat script , which updates a DynamoDB table as SNS notifications of new Landsat assets come in. landsat-cogeo-mosaic create-from-db \\ ` # Path to the sqlite database file` \\ --sqlite-path data/scene_list.db \\ ` # Path to the path-row geometry file. This is stored in Git` \\ --pathrow-index data/pr_index.jsonl.gz \\ ` # Min zoom of mosaic, 7 is a good default for Landsat` \\ --min-zoom 7 \\ ` # Max zoom of mosaic, 12 is a good default for Landsat` \\ --max-zoom 12 \\ ` # Zoom level to use for quadkeys` \\ --quadkey-zoom 8 \\ ` # Maximum cloud cover. This means 5%` \\ --max-cloud 5 \\ ` # Preference for choosing the asset for a tile` \\ --sort-preference newest \\ > data/out/mosaic_latest.json Then upload this mosaic to the DynamoDB table I use for the auto-updating landsat mosaic. The cogeo-mosaic CLI contains a helper for uploading a MosaicJSON to a DynamoDB table. cogeo-mosaic upload --url 'dynamodb://region/table-name' mosaic.json","title":"Latest cloudless"}]}